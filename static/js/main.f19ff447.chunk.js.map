{"version":3,"sources":["Helpers/helpers.js","API/api.js","context.js","Components/StatsDisplay/StatsDisplay.js","Components/StatsDisplay/index.js","Components/SearchBox/AutoSuggest.js","Components/ReusableComponents/index.js","Components/SearchBox/SearchBox.js","Components/SearchBox/index.js","Components/News/NewsArticle.js","Components/News/News.js","Components/News/index.js","Components/App/app.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["textShortener","text","length","slice","countries","country","code","proxyURL","apiCoronaCall","fetchURL","fetch","then","res","json","parsedJson","result","cases","search","holder","filter","obj","console","log","filterCases","Context","createContext","searchTerm","countryCode","articles","darkMode","allStats","getAllStats","updateSearchTerm","Provider","response","setState","updateCountryCode","countryObject","find","state","value","this","props","children","React","Component","Consumer","StatsContainer","styled","div","StatItem","Title","h1","Header","Paragraph","p","StatsItem","title","content","StatsDisplay","stats","Object","keys","StatsItemArray","map","key","Suggestion","getSuggestionValue","suggestion","renderSuggestion","AutoSuggest","useState","setValue","suggestions","setSuggestions","inputProps","placeholder","onChange","e","newValue","onKeyPress","onSuggestionsFetchRequested","inputValue","trim","toLowerCase","inputLength","count","getSuggestions","onSuggestionsClearRequested","theme","inputTheme","Container","loadingAnimation","keyframes","Ring","LoadingSymbol","SearchContainer","SearchBarContainer","SearchForm","SearchBox","input","setSearchTerm","update","setUpdate","setStats","isLoading","setIsLoading","useEffect","event","updateContextSearchTerm","LeftContainer","RightContainer","TextContainer","ImageContainer","Author","h3","Description","LinkToArticle","a","Image","img","NewsArticle","author","description","href","url","src","imageUrl","alt","News","newsResults","setNewsResults","apiNewsCall","parsedJSON","Articles","article","urlToImage","AppContainer","App","context","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f19ff447.chunk.js","sourcesContent":["const textShortener = (text, length) => {\n\n    \n\n    let newText = text.slice(0, length);\n\n    // console.log(newUrlArray)\n\n    // newUrlArray.push('...');\n\n    // let newUrl = newUrlArray.join('');\n\n    return newText + '...';\n};\n\nconst countries =  [\n    {\n        country: 'Australia',\n        code: 'Au'\n    }, \n    {\n        country: 'United States',\n        code: 'Us',\n    },\n    {\n        country: 'China',\n        code: 'Ch'\n    },\n    {\n        country: 'Brazil',\n        code: 'br'\n    },\n    {\n        country: 'Canada',\n        code: 'ca'\n    },\n    {\n        country: 'Germany',\n        code: 'de'\n    },\n    {\n        country: 'France',\n        code: 'fr'\n    },\n    {\n        country: 'Great Britain',\n        code: 'gb',\n    },\n    {\n        country: 'Greece',\n        code: 'gr',\n    },\n    {\n        country: 'Russia',\n        code: 'ru'\n    },\n    {\n        country: 'Japan',\n        code: 'jp'\n    },\n    {\n        country: 'South Korea',\n        code: 'sk',\n    },\n    {\n        country: \"Thailand\",\n        code: 'th',\n    },\n    {\n        country: 'Italy',\n        code: 'it',\n    },\n    {\n        country: 'India',\n        code: 'in',\n    }\n];\n\nconst findObjectWithValue = (obj, value) => {\n    return obj.country === value;\n};\n\nconst filterCases = (cases, search) => {\n\n    // search through the full array of objects return from the api. Find the object that \n    // corresponds to the search term.\n        let holder = cases.filter(obj => {\n            return obj.country === search;\n        });\n\n        console.log(holder)\n        // remove the country key value pair from the return object\n        if(holder.length >= 1){\n            delete holder[0]['country'];\n            return holder[0];\n        }\n        \n        return null;\n    \n\n};\n\nexport {textShortener, countries, findObjectWithValue, filterCases}","import {filterCases} from '../Helpers';\nconst proxyURL = 'https://cors-anywhere.herokuapp.com/';\n\nconst apiNewsCall = (country) => {\n\n    let fetchURL\n    if(country !== 'Global'){\n        fetchURL = `http://newsapi.org/v2/top-headlines?country=${country}&q=coronavirus&apiKey=b23cc20188404ec8b852cc86145559e7`;\n    } else {\n        fetchURL = `http://newsapi.org/v2/top-headlines?country=&q=coronavirus&apiKey=b23cc20188404ec8b852cc86145559e7`;\n    }\n\n    \n    return fetch(proxyURL + fetchURL);\n};\n\nconst apiCoronaCall = (country) => {\n\n    let fetchURL = '';\n    if(!country){\n        fetchURL = `https://corona.lmao.ninja/all`\n        return fetch(proxyURL + fetchURL).then(res => {return res.json()}).then(parsedJson => {return parsedJson});\n    } else {\n        fetchURL = `https://corona.lmao.ninja/countries`;\n        return fetch(proxyURL + fetchURL).then(res => {return res.json()}).then(parsedJson => {return parsedJson}).then(result => {return filterCases(result, country)});\n    }\n}\n\nexport {apiNewsCall, apiCoronaCall};","import React, {createContext} from 'react';\nimport {apiCoronaCall, apiNewsCall} from './API';\nimport {countries, findObjectWithValue} from './Helpers';\n\nconst Context = createContext({\n    searchTerm: 'Global',\n    countryCode: 'all',\n    articles: null,\n    darkMode: false,\n    allStats: null,\n    getAllStats: () => {},\n    updateSearchTerm: () => {},\n});\n\nexport class Provider extends React.Component {\n\n    \n\n    getAllStats = () => {\n        apiCoronaCall().then(response => {this.setState({allStats: response})})\n    };\n\n    updateSearchTerm = (searchTerm) => {\n        this.setState({searchTerm: searchTerm});\n        this.updateCountryCode(searchTerm);\n        console.log(searchTerm)\n    };\n\n    updateCountryCode = (searchTerm) => {\n        let countryObject = countries.find(({country}) => country === searchTerm);\n        console.log(countryObject);\n        if(countryObject){\n        this.setState({countryCode: countryObject?.code?  countryObject.code : 'all'});\n        console.log(countryObject);\n        } else {\n            this.setState({countryCode: 'all'})\n        }\n    }\n\n    state = {\n        articles: null,\n        darkMode: true,\n        allStats: null,\n        getAllStats: this.getAllStats,\n        searchTerm: 'Global',\n        countryCode: 'all',\n        updateSearchTerm: this.updateSearchTerm,\n    };\n\n    render(){\n        return (\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n};\n\nexport const Consumer = Context.Consumer;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StatsContainer = styled.div`\n    width: 100%;\n    height: calc(100% - 34px);\n    display: flex;\n    flex-wrap: wrap;\n    padding: 16px 16px 16px 16px;\n    align-items: center;\n    justify-content: center;\n    \n    `\nconst StatItem = styled.div`\n    width: 30%;\n    height: 40%;\n    background-color: white;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    line-height: 1.5em;\n    border: 1px solid rgb(215, 218, 220);\n    background-color: #1a1a1b;\n    color: #fff;\n    border-radius: 4px;\n`\n\nconst Title = styled.h1 `\n    font-size: 2em;\n    color: rgb(215, 218, 220);\n    width: 100%;\n    text-align: center;\n    text-transform: uppercase;\n`\n\nconst Header = styled.h1`\n    text-align: center;\n    text-transform: capitalize;\n    color: rgb(215, 218, 220);\n`\n\nconst Paragraph = styled.p`\n    text-align: center;\n    color: rgb(129, 131, 132)\n`\nconst StatsDisplay = (props) => {\n\n    console.log(props.stats)\n\n    let stats = Object.keys(props.stats);\n\n    console.log(stats);\n\n    let StatsItemArray = stats.map(key => {\n        let content = props.stats[key];\n        console.log(content)\n        return (<StatsItem title={key} content={content} key={key}/>)\n    })\n\n    console.log(stats);\n    return (\n        <StatsContainer>\n            <Title>{props.searchTerm}</Title>\n            {StatsItemArray}\n        </StatsContainer>\n    )\n}\n\nconst StatsItem = props => {\n\n    return (\n        <StatItem>\n            <Header>\n                {props.title}\n            </Header>\n            <Paragraph>\n                {props.content}\n            </Paragraph>\n        </StatItem>\n        \n    )\n};\n\nexport default StatsDisplay;","import StatsDisplay from './StatsDisplay';\n\nexport default StatsDisplay;","import React, {useState, useEffect} from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport styled from 'styled-components'\nimport inputTheme from './input.css';\nimport {countries} from '../../Helpers'\n\nconst Suggestion = styled.div`\n    background-color: rgb(26, 26, 27);\n    border: 1px solid rgb(215,218,221);\n    color: rgb(215,218,221);\n    width: 95%;\n    border-radius: 4px;\n    padding: 4px 4px 4px 4px;\n\n`\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    return inputLength === 0 ? [] : countries.filter(count => {\n        return (count.country.toLowerCase().slice(0, inputLength) === inputValue)\n    })\n};\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.country;\n\nconst renderSuggestion = suggestion => {\n    return (\n        <Suggestion>\n            {suggestion.country}\n        </Suggestion>\n            \n        \n    )\n}\n\nconst AutoSuggest = props => {\n    const [value, setValue] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n\n    const onChange = (e, {newValue}) => {\n        setValue(newValue);\n        console.log(newValue)\n        props.onChange(newValue);\n    }\n\n    const onSuggestionsFetchRequested = ({value}) => {\n        setSuggestions(getSuggestions(value));\n    };\n\n    const onSuggestionsClearRequested = () => {\n        setSuggestions([]);\n    }\n\n    const inputProps = {\n        placeholder: 'Search',\n        value,\n        onChange: onChange,\n        onKeyPress: props.onKeyPress,\n    }\n\n    return (\n        <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n            inputProps={inputProps}\n            onKeyPress={props.onKeyPress}\n            theme={inputTheme}\n        />\n    )\n};\n\nexport default AutoSuggest;","import React from 'react';\nimport styled, {keyframes} from 'styled-components';\n\nconst Container = styled.div`\n    position: relative;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    width: 100px;\n    height: 100px;\n`\n\nconst loadingAnimation = keyframes`\n    0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n`\n\nconst Ring = styled.div`\n\n    display: inline-block;\n    width: 80px;\n    height: 80px;\n\n    &:after{\n        content: \" \";\n        display: block;\n        width: 64px;\n        height: 64px;\n        margin: 8px;\n        border-radius: 50%;\n        border: 6px solid #fff;\n        border-color: rgb(215, 218, 220) transparent rgb(215, 218, 220) transparent;\n        animation: ${loadingAnimation} 1.2s linear infinite;\n    }\n    \n`\n\n\nconst LoadingSymbol = (props) => {\n\n    \n    return (\n        <Container>\n            <Ring>\n\n            </Ring>\n        </Container>\n    )\n}\n\nexport {LoadingSymbol};","import React, {useState, useEffect, createContext} from \"react\"\nimport styled from 'styled-components';\nimport StatsDisplay from '../StatsDisplay';\nimport AutoSuggest from './AutoSuggest'\nimport {LoadingSymbol} from '../ReusableComponents';\n\nimport {apiCoronaCall} from '../../API';\n\nconst SearchContainer = styled.div`\n    width: 300px;\n    height: 300px;\n    background-color: #2b2b2c;\n    border-radius: 4px;\n    padding: 16px 0 16px 0;\n`\n\nconst SearchBarContainer = styled.div`\n    width: 100%;\n    height: 60px;\n`\n\nconst SearchForm = styled.div`\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst SearchInput = styled.input`\n    width: 80%;\n    height: 80%;\n    background-color: #474748;\n    border-radius: 4px;\n    padding: 0 16px 0 16px;\n    border: 1px solid rgb(52, 53, 54);\n    color: rgb(215, 218, 220);\n\n    &:focus {\n        background-color: rgb(26, 26, 27);\n        border: 1px solid rgb(215, 218, 220) !important;\n        outline: none;\n    }\n`\n\nconst SearchBox = (props) => {\n\n    const [searchTerm, setSearchTerm] = useState('');\n    const [update, setUpdate] = useState(false);\n    \n    const [stats, setStats] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n\n        apiCoronaCall(searchTerm).then(response => {\n            setStats(response);\n            setIsLoading(false);\n            console.log(response)\n        });\n        setSearchTerm('');\n    }, [update]);\n\n    const onSearchSubmit = () => {\n        setUpdate(!update);\n        props.updateContextSearchTerm(searchTerm);\n    }\n    // props.getAllStats();\n\n    const handleKeyPress = (event) => {\n        console.log(event.key)\n        if(event.key === 'Enter'){\n            onSearchSubmit();\n            // setSearchTerm('');\n            \n            \n        }\n    };\n\n    const handleInputChange = (value) => {\n        setSearchTerm(value);\n    }\n\n\n    return (\n        <SearchContainer>\n            <SearchBarContainer>\n                <SearchForm >\n                    {/* <SearchInput placeholder={'Search'} onChange={handleInputChange} onKeyPress={handleKeyPress} value={searchTerm}/> */}\n                    <AutoSuggest onChange={handleInputChange} onKeyPress={handleKeyPress} value={searchTerm}/>\n                </SearchForm>\n            </SearchBarContainer>\n            {isLoading || stats === null ? <LoadingSymbol /> : <StatsDisplay stats={stats} searchTerm={props.searchTerm}/>}\n            {/* <StatsDisplay stats={stats}>\n\n            </StatsDisplay> */}\n            {/* insert here coronastats */}\n        </SearchContainer>\n    )\n}\n\nexport default SearchBox;","import SearchBox from './SearchBox';\n\nexport default SearchBox;","import React from 'react';\nimport styled from 'styled-components';\n\nimport {textShortener} from '../../Helpers';\n\nconst Container = styled.div`\n    height: 250px;\n    width: 100%;\n    background-color: rgba(26, 26, 27, 0.8);\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    border-radius: 4px;\n    margin: 16px 0px 16px 0px;\n`\n\nconst LeftContainer = styled.div`\n    \n    height: 100%;\n    width: 25px;\n`\nconst RightContainer = styled.div`\n    height: 100%;\n    width: calc(100% - 25px);\n    background-color: #2b2b2c;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n`\n\nconst TextContainer = styled.div`\n    width: calc(100% - 100px);\n\n`\n\nconst ImageContainer = styled.div`\n    width: 100px;\n    padding: 10px 10px 10px 10px;\n`\n\nconst Author = styled.h3`\n    color: rgb(129,131,132);\n    font-size: 12px;\n    padding: 4px 4px 4px 4px;\n`\n\nconst Title = styled.h1`\n    color: rgb(215,218,220);\n    font-size: 18px;\n    padding: 4px 4px 4px 4px;\n`\n\nconst Description = styled.p`\n    color: rgb(129,131,132);\n    font-size: 14px;\n    padding: 4px 4px 4px 4px;\n`\n\n\nconst LinkToArticle = styled.a`\n    color: rgb(79,188,255);\n    font-size: 12px;\n    padding: 4px 4px 4px 4px;\n`\nconst Image = styled.img`\n    width: 85px;\n    height: 85px;\n`\n\nconst NewsArticle = (props) => {\n\n    return (\n        <Container>\n            <LeftContainer>\n\n            </LeftContainer>\n            <RightContainer>\n                <TextContainer>\n                    <Author>\n                        Author: {props.author}\n                    </Author>\n                    <Title>\n                        {props.title.length > 80 ? textShortener(props.title, 80) : props.title}\n                    </Title>\n                    <Description>\n                        {props.description.length > 50 ? textShortener(props.description, 80) : props.description}\n                    </Description>\n                    <LinkToArticle href={props.url}>\n                        {textShortener(props.url, 30)}\n                    </LinkToArticle>\n                </TextContainer>\n                <ImageContainer>\n                    <Image src={props.imageUrl} alt={`image for ${props.title}`}/>\n                </ImageContainer>\n            </RightContainer>\n        </Container>\n    )\n\n}\n\nexport default NewsArticle;","import React, { useState, useEffect } from \"react\";\nimport styled from 'styled-components';\nimport {apiNewsCall} from '../../API';\nimport NewsArticle from './NewsArticle';\n\nconst Container = styled.div`\n    width: 300px;\n    display: flex;\n    flex-direction: column;\n    padding: 16px 0 16px 0;\n`\n\nconst News = (props) => {\n\n    const [newsResults, setNewsResults] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n\n        apiNewsCall(props.searchTerm).then(res => res.json()).then(parsedJSON => setNewsResults(parsedJSON.articles));\n    }, [props.searchTerm]);\n\n    console.log(props.searchTerm);\n\n    const Articles = newsResults.map(article => {\n        return <NewsArticle \n            author={article.author} \n            title={article.title} \n            description={article.description} \n            url={article.url} \n            imageUrl={article.urlToImage} \n            key={article.title}\n        />\n    })\n\n\n    return (\n        <Container>\n            {/* <NewsArticle>\n\n            </NewsArticle> */}\n            {Articles}\n        </Container>\n    )\n}\n\nexport default News;\n ","import News from './News';\n\nexport default News;","import React from 'react';\nimport styled from 'styled-components';\nimport {Provider, Consumer} from '../../context';\nimport SearchBox from '../SearchBox';\nimport News from '../News';\n\nconst AppContainer = styled.div`\n    width: 100vw;\n    min-height: 100vh;\n    background-color: #1a1a1b;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 30px 30px 30px 30px;\n`\n\n\n\nfunction App() {\n\n\n    \n  return (\n      <Provider>\n          <Consumer>\n              {context => (\n                <AppContainer>\n                    <SearchBox searchTerm={context.searchTerm} updateContextSearchTerm={context.updateSearchTerm}/>\n                    <News searchTerm={context.countryCode}/>\n                </AppContainer>\n              )}\n                \n          </Consumer>\n      </Provider>\n    \n  );\n}\n\nexport default App;","import App from './app'\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}